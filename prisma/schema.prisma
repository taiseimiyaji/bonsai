// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

model User {
  id            String          @id @default(uuid())
  googleId      String          @unique
  email         String          @unique
  name          String?
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Todo          Todo[]
  todoCategories TodoCategory[] // Todoカテゴリとの関連
  Scrap         Scrap[]
  ScrapBook     ScrapBook[]
  rssFeeds      RssFeed[]       @relation("UserRssFeeds")
  rssReadStatus RssReadStatus[] 
  readLater     ReadLater[]     // 後で読む機能の関連付け
  role          UserRole        @default(USER)
  
  // Auth.js用のリレーション
  accounts      Account[]
  sessions      Session[]
}

enum UserRole {
  USER
  ADMIN
}

// 優先度の列挙型
enum TodoPriority {
  HIGH
  MEDIUM
  LOW
}

// タスクのステータス列挙型
enum TodoStatus {
  TODO
  IN_PROGRESS
  DONE
}

model Todo {
  id          String       @id @default(uuid())
  title       String
  description String?
  completed   Boolean      @default(false)
  archived    Boolean      @default(false)  // アーカイブフラグ
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  dueDate     DateTime?    // 期限日
  priority    TodoPriority @default(MEDIUM) // 優先度
  status      TodoStatus   @default(TODO)   // ステータス
  order       Int          @default(0)      // 表示順序
  categoryId  String?      // カテゴリID
  category    TodoCategory? @relation(fields: [categoryId], references: [id])
  parentId    String?      // 親タスクID（サブタスク用）
  parent      Todo?        @relation("TodoToSubTasks", fields: [parentId], references: [id])
  subTasks    Todo[]       @relation("TodoToSubTasks") // サブタスク
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

// Todoカテゴリモデル
model TodoCategory {
  id        String   @id @default(uuid())
  name      String
  color     String   @default("#3B82F6") // デフォルトは青色
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  todos     Todo[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Scrap {
  id          String         @id @default(uuid())
  userId      String
  user        User           @relation(fields: [userId], references: [id])
  content     String?
  ogpData     Json?
  scrapBookId String
  scrapBook   ScrapBook      @relation(fields: [scrapBookId], references: [id])
  categoryId  String?
  category    ScrapCategory? @relation(fields: [categoryId], references: [id])
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model ScrapBook {
  id          String          @id @default(uuid())
  title       String
  description String?
  userId      String
  user        User            @relation(fields: [userId], references: [id])
  scraps      Scrap[]
  image       String?
  links       ScrapbookLink[] @relation("SourceScrapbook")
  linkedBy    ScrapbookLink[] @relation("TargetScrapbook")
  status      ScrapBookStatus @default(PRIVATE)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

enum ScrapBookStatus {
  PUBLIC
  PRIVATE
}

model ScrapbookLink {
  id                String    @id @default(uuid())
  sourceScrapbookId String
  targetScrapbookId String
  createdAt         DateTime  @default(now())
  sourceScrapbook   ScrapBook @relation("SourceScrapbook", fields: [sourceScrapbookId], references: [id])
  targetScrapbook   ScrapBook @relation("TargetScrapbook", fields: [targetScrapbookId], references: [id])

  @@unique([sourceScrapbookId, targetScrapbookId])
}

model ScrapCategory {
  id     String  @id @default(uuid())
  name   String  @unique
  scraps Scrap[]
}

// RSS関連のモデル
model RssFeed {
  id          String       @id @default(uuid())
  url         String       @unique
  title       String
  description String?
  feedType    RssFeedType  @default(PRIVATE)
  userId      String?
  user        User?        @relation("UserRssFeeds", fields: [userId], references: [id])
  articles    RssArticle[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  lastFetched DateTime?

  @@index([feedType])
  @@index([userId])
}

enum RssFeedType {
  PUBLIC  // 全体公開RSS（管理者が設定）
  PRIVATE // 個人用RSS（ログインユーザーが設定）
}

model RssArticle {
  id          String          @id @default(uuid())
  feedId      String
  feed        RssFeed         @relation(fields: [feedId], references: [id], onDelete: Cascade)
  title       String
  link        String          @unique
  description String?
  content     String?
  author      String?
  publishedAt DateTime
  imageUrl    String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  readStatus  RssReadStatus[] 
  readLater   ReadLater[]     // 後で読む機能の関連付け

  @@index([feedId])
  @@index([publishedAt])
}

// 記事の既読状態を管理するモデル
model RssReadStatus {
  id        String     @id @default(uuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  articleId String
  article   RssArticle @relation(fields: [articleId], references: [id], onDelete: Cascade)
  isRead    Boolean    @default(true)
  readAt    DateTime   @default(now())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([userId, articleId])
  @@index([userId])
  @@index([articleId])
  @@index([isRead])
}

// 後で読む機能のモデル
model ReadLater {
  id        String     @id @default(uuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  articleId String
  article   RssArticle @relation(fields: [articleId], references: [id], onDelete: Cascade)
  addedAt   DateTime   @default(now())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([userId, articleId])
  @@index([userId])
  @@index([articleId])
  @@index([addedAt])
}

// Auth.jsのために必要なモデル
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// 定期実行ジョブのログ
model CronExecutionLog {
  id                   String   @id @default(uuid())
  jobName              String   // ジョブ名（例: update-feeds）
  startTime            DateTime // 開始時刻
  endTime              DateTime // 終了時刻
  executionTimeSeconds Float    // 実行時間（秒）
  status               String   // ステータス（SUCCESS, ERROR）
  details              String?  // 詳細情報
  createdAt            DateTime @default(now())

  @@index([jobName])
  @@index([startTime])
  @@index([status])
}
